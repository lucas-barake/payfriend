// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

enum DebtRecurringFrequency {
  WEEKLY
  BIWEEKLY
  MONTHLY
}

model Debt {
  id                 String                  @id @default(uuid())
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  name               String
  description        String?                 @db.Text
  amount             Float
  dueDate            DateTime?
  lenderId           String
  lender             User                    @relation(fields: [lenderId], references: [id])
  archived           Boolean                 @default(false)
  recurringFrequency DebtRecurringFrequency?
  borrowers          Borrower[]
  pendingInvites     PendingInvite[]
}

enum BorrowerStatus {
  YET_TO_PAY
  PENDING_CONFIRMATION
  CONFIRMED
}

model Borrower {
  id        String         @id @default(uuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  userId    String
  user      User           @relation(fields: [userId], references: [id])
  debtId    String
  debt      Debt           @relation(fields: [debtId], references: [id])
  status    BorrowerStatus @default(YET_TO_PAY)

  @@unique([userId, debtId])
}

model PendingInvite {
  createdAt    DateTime @default(now())
  inviteeEmail String
  inviterId    String
  inviter      User     @relation(fields: [inviterId], references: [id])
  debtId       String
  debt         Debt     @relation(fields: [debtId], references: [id])

  @@id([inviteeEmail, debtId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum SubscriptionType {
  BASIC
}

enum SubscriptionStatus {
  SUCCESS
  PENDING
  FAILED
  CANCELLED
}

model ActiveSubscription {
  id                String           @id // MercadoPago's generated ID
  createdAt         DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime         @updatedAt @db.Timestamptz(6)
  userId            String           @unique
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              SubscriptionType
  externalReference String           @unique
}

model SubscriptionHistory {
  id                String             @id // MercadoPago's generated ID
  createdAt         DateTime           @default(now()) @db.Timestamptz(6)
  userId            String
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              SubscriptionType
  status            SubscriptionStatus
  externalReference String             @unique
}

model User {
  id                  String                @id @default(uuid())
  name                String?
  email               String?               @unique
  emailVerified       DateTime?
  phoneNumber         String?               @unique
  phoneVerified       DateTime?             @db.Timestamptz(6)
  image               String?
  accounts            Account[]
  sessions            Session[]
  debtsAsLender       Debt[]
  debtsAsBorrower     Borrower[]
  pendingInvites      PendingInvite[]
  activeSubscription  ActiveSubscription?
  subscriptionHistory SubscriptionHistory[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
