// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Group {
  id             String               @id @default(cuid())
  createdAt      DateTime             @default(now())
  name           String
  description    String               @db.Text
  debts          Debt[]
  users          GroupsUsersMapping[]
  pendingInvites PendingInvite[]
}

model Debt {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  description String    @db.Text
  amount      Float
  paid        Boolean   @default(false)
  dueDate     DateTime?
  borrowerId  String
  borrower    User      @relation("Borrower", fields: [borrowerId], references: [id])
  lenderId    String
  lender      User      @relation("Lender", fields: [lenderId], references: [id])
  groupId     String?
  group       Group?    @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

enum GroupRole {
  OWNER
  COLLABORATOR
  VIEWER
}

model GroupsUsersMapping {
  userId  String
  user    User      @relation(fields: [userId], references: [id])
  groupId String
  group   Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  role    GroupRole @default(COLLABORATOR)

  @@id([userId, groupId])
}

model PendingInvite {
  userId  String
  user    User      @relation(fields: [userId], references: [id])
  groupId String
  group   Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  role    GroupRole

  @@id([userId, groupId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String               @id @default(cuid())
  name            String?
  email           String?              @unique
  emailVerified   DateTime?
  otp             String?
  otpUpdatedAt    DateTime?            @db.Timestamptz(6)
  image           String?
  accounts        Account[]
  sessions        Session[]
  debtsAsBorrower Debt[]               @relation("Borrower")
  debtsAsLender   Debt[]               @relation("Lender")
  groups          GroupsUsersMapping[]
  pendingInvites  PendingInvite[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
