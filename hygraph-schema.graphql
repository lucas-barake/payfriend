# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"An object with an ID"
interface Entity {
    "The id of the object."
    id: ID!
    "The Stage of an object"
    stage: Stage!
}

"An object with an ID"
interface Node {
    "The id of the object."
    id: ID!
    "The Stage of an object"
    stage: Stage!
}

union ScheduledOperationAffectedDocument = Asset | Documentation

type Aggregate {
    count: Int!
}

"Asset system model"
type Asset implements Node {
    "The time the document was created"
    createdAt(
        "Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both"
        variation: SystemDateTimeFieldVariation! = COMBINED
    ): DateTime!
    "User that created this document"
    createdBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    "Get the document in other stages"
    documentInStages(
        "Decides if the current stage should be included or not"
        includeCurrent: Boolean! = false,
        "Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree"
        inheritLocale: Boolean! = false,
        "Potential stages that should be returned"
        stages: [Stage!]! = [DRAFT, PUBLISHED]
    ): [Asset!]!
    "The file name"
    fileName: String!
    "The file handle"
    handle: String!
    "The height of the file"
    height: Float
    "List of Asset versions"
    history(
        limit: Int! = 10,
        skip: Int! = 0,
        "This is optional and can be used to fetch the document version history for a specific stage instead of the current one"
        stageOverride: Stage
    ): [Version!]!
    "The unique identifier"
    id: ID!
    "System Locale field"
    locale: Locale!
    "Get the other localizations for this document"
    localizations(
        "Decides if the current locale should be included or not"
        includeCurrent: Boolean! = false,
        """

        Potential locales that should be returned.

        The order of locales will also override locale fall-backing behaviour in the query's subtree.

        Note any related model with localized fields in the query's subtree will be affected.
        The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.

        Consider using this in conjunction with forceParentLocale on the children relation fields.
        """
        locales: [Locale!]! = [en, es]
    ): [Asset!]!
    "The mime type of the file"
    mimeType: String
    "The time the document was published. Null on documents in draft stage."
    publishedAt(
        "Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both"
        variation: SystemDateTimeFieldVariation! = COMBINED
    ): DateTime
    "User that last published this document"
    publishedBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    scheduledIn(
        after: String,
        before: String,
        first: Int,
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        last: Int,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!],
        skip: Int,
        where: ScheduledOperationWhereInput
    ): [ScheduledOperation!]!
    "The file size"
    size: Float
    "System stage field"
    stage: Stage!
    "The time the document was updated"
    updatedAt(
        "Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both"
        variation: SystemDateTimeFieldVariation! = COMBINED
    ): DateTime!
    "User that last updated this document"
    updatedBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    "Get the url for the asset with provided transformations applied."
    url(transformation: AssetTransformationInput): String!
    "The file width"
    width: Float
}

"A connection to a list of items."
type AssetConnection {
    aggregate: Aggregate!
    "A list of edges."
    edges: [AssetEdge!]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type AssetEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Asset!
}

type BatchPayload {
    "The number of nodes that have been affected by the Batch operation."
    count: Long!
}

"Representing a color value comprising of HEX, RGBA and css color values"
type Color {
    css: String!
    hex: Hex!
    rgba: RGBA!
}

type DocumentVersion {
    createdAt: DateTime!
    data: Json
    id: ID!
    revision: Int!
    stage: Stage!
}

type Documentation implements Node {
    content: String
    "The time the document was created"
    createdAt(
        "Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both"
        variation: SystemDateTimeFieldVariation! = COMBINED
    ): DateTime!
    "User that created this document"
    createdBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    "Get the document in other stages"
    documentInStages(
        "Decides if the current stage should be included or not"
        includeCurrent: Boolean! = false,
        "Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree"
        inheritLocale: Boolean! = false,
        "Potential stages that should be returned"
        stages: [Stage!]! = [DRAFT, PUBLISHED]
    ): [Documentation!]!
    "List of Documentation versions"
    history(
        limit: Int! = 10,
        skip: Int! = 0,
        "This is optional and can be used to fetch the document version history for a specific stage instead of the current one"
        stageOverride: Stage
    ): [Version!]!
    "The unique identifier"
    id: ID!
    "System Locale field"
    locale: Locale!
    "Get the other localizations for this document"
    localizations(
        "Decides if the current locale should be included or not"
        includeCurrent: Boolean! = false,
        """

        Potential locales that should be returned.

        The order of locales will also override locale fall-backing behaviour in the query's subtree.

        Note any related model with localized fields in the query's subtree will be affected.
        The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.

        Consider using this in conjunction with forceParentLocale on the children relation fields.
        """
        locales: [Locale!]! = [en, es]
    ): [Documentation!]!
    "The time the document was published. Null on documents in draft stage."
    publishedAt(
        "Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both"
        variation: SystemDateTimeFieldVariation! = COMBINED
    ): DateTime
    "User that last published this document"
    publishedBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    scheduledIn(
        after: String,
        before: String,
        first: Int,
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        last: Int,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!],
        skip: Int,
        where: ScheduledOperationWhereInput
    ): [ScheduledOperation!]!
    "System stage field"
    stage: Stage!
    title: String
    "The time the document was updated"
    updatedAt(
        "Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both"
        variation: SystemDateTimeFieldVariation! = COMBINED
    ): DateTime!
    "User that last updated this document"
    updatedBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
}

"A connection to a list of items."
type DocumentationConnection {
    aggregate: Aggregate!
    "A list of edges."
    edges: [DocumentationEdge!]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type DocumentationEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: Documentation!
}

"Representing a geolocation point with latitude and longitude"
type Location {
    distance(from: LocationInput!): Float!
    latitude: Float!
    longitude: Float!
}

type Mutation {
    "Create one asset"
    createAsset(data: AssetCreateInput!): Asset @deprecated(reason: "Asset mutations will be overhauled soon")
    "Create one documentation"
    createDocumentation(data: DocumentationCreateInput!): Documentation
    "Create one scheduledRelease"
    createScheduledRelease(data: ScheduledReleaseCreateInput!): ScheduledRelease
    "Delete one asset from _all_ existing stages. Returns deleted document."
    deleteAsset(
        "Document to delete"
        where: AssetWhereUniqueInput!
    ): Asset
    "Delete one documentation from _all_ existing stages. Returns deleted document."
    deleteDocumentation(
        "Document to delete"
        where: DocumentationWhereUniqueInput!
    ): Documentation
    "Delete many Asset documents"
    deleteManyAssets(
        "Documents to delete"
        where: AssetManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyAssetsConnection)")
    "Delete many Asset documents, return deleted documents"
    deleteManyAssetsConnection(
        after: ID,
        before: ID,
        first: Int,
        last: Int,
        skip: Int,
        "Documents to delete"
        where: AssetManyWhereInput
    ): AssetConnection!
    "Delete many Documentation documents"
    deleteManyDocumentations(
        "Documents to delete"
        where: DocumentationManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyDocumentationsConnection)")
    "Delete many Documentation documents, return deleted documents"
    deleteManyDocumentationsConnection(
        after: ID,
        before: ID,
        first: Int,
        last: Int,
        skip: Int,
        "Documents to delete"
        where: DocumentationManyWhereInput
    ): DocumentationConnection!
    "Delete and return scheduled operation"
    deleteScheduledOperation(
        "Document to delete"
        where: ScheduledOperationWhereUniqueInput!
    ): ScheduledOperation
    "Delete one scheduledRelease from _all_ existing stages. Returns deleted document."
    deleteScheduledRelease(
        "Document to delete"
        where: ScheduledReleaseWhereUniqueInput!
    ): ScheduledRelease
    "Publish one asset"
    publishAsset(
        "Optional localizations to publish"
        locales: [Locale!],
        "Whether to publish the base document"
        publishBase: Boolean = true,
        "Publishing target stage"
        to: [Stage!]! = [PUBLISHED],
        "Document to publish"
        where: AssetWhereUniqueInput!,
        "Whether to include the default locale when publishBase is set"
        withDefaultLocale: Boolean = true
    ): Asset
    "Publish one documentation"
    publishDocumentation(
        "Optional localizations to publish"
        locales: [Locale!],
        "Whether to publish the base document"
        publishBase: Boolean = true,
        "Publishing target stage"
        to: [Stage!]! = [PUBLISHED],
        "Document to publish"
        where: DocumentationWhereUniqueInput!,
        "Whether to include the default locale when publishBase is set"
        withDefaultLocale: Boolean = true
    ): Documentation
    "Publish many Asset documents"
    publishManyAssets(
        "Document localizations to publish"
        locales: [Locale!],
        "Whether to publish the base document"
        publishBase: Boolean = true,
        "Stages to publish documents to"
        to: [Stage!]! = [PUBLISHED],
        "Identifies documents in each stage to be published"
        where: AssetManyWhereInput,
        "Whether to include the default locale when publishBase is true"
        withDefaultLocale: Boolean = true
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyAssetsConnection)")
    "Publish many Asset documents"
    publishManyAssetsConnection(
        after: ID,
        before: ID,
        first: Int,
        "Stage to find matching documents in"
        from: Stage = DRAFT,
        last: Int,
        "Document localizations to publish"
        locales: [Locale!],
        "Whether to publish the base document"
        publishBase: Boolean = true,
        skip: Int,
        "Stages to publish documents to"
        to: [Stage!]! = [PUBLISHED],
        "Identifies documents in each stage to be published"
        where: AssetManyWhereInput,
        "Whether to include the default locale when publishBase is true"
        withDefaultLocale: Boolean = true
    ): AssetConnection!
    "Publish many Documentation documents"
    publishManyDocumentations(
        "Document localizations to publish"
        locales: [Locale!],
        "Whether to publish the base document"
        publishBase: Boolean = true,
        "Stages to publish documents to"
        to: [Stage!]! = [PUBLISHED],
        "Identifies documents in each stage to be published"
        where: DocumentationManyWhereInput,
        "Whether to include the default locale when publishBase is true"
        withDefaultLocale: Boolean = true
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyDocumentationsConnection)")
    "Publish many Documentation documents"
    publishManyDocumentationsConnection(
        after: ID,
        before: ID,
        first: Int,
        "Stage to find matching documents in"
        from: Stage = DRAFT,
        last: Int,
        "Document localizations to publish"
        locales: [Locale!],
        "Whether to publish the base document"
        publishBase: Boolean = true,
        skip: Int,
        "Stages to publish documents to"
        to: [Stage!]! = [PUBLISHED],
        "Identifies documents in each stage to be published"
        where: DocumentationManyWhereInput,
        "Whether to include the default locale when publishBase is true"
        withDefaultLocale: Boolean = true
    ): DocumentationConnection!
    "Schedule to publish one asset"
    schedulePublishAsset(
        "Optional localizations to publish"
        locales: [Locale!],
        "Whether to publish the base document"
        publishBase: Boolean = true,
        "Release at point in time, will create new release containing this operation"
        releaseAt: DateTime,
        "Optionally attach this scheduled operation to an existing release"
        releaseId: String,
        "Publishing target stage"
        to: [Stage!]! = [PUBLISHED],
        "Document to publish"
        where: AssetWhereUniqueInput!,
        "Whether to include the default locale when publishBase is set"
        withDefaultLocale: Boolean = true
    ): Asset
    "Schedule to publish one documentation"
    schedulePublishDocumentation(
        "Optional localizations to publish"
        locales: [Locale!],
        "Whether to publish the base document"
        publishBase: Boolean = true,
        "Release at point in time, will create new release containing this operation"
        releaseAt: DateTime,
        "Optionally attach this scheduled operation to an existing release"
        releaseId: String,
        "Publishing target stage"
        to: [Stage!]! = [PUBLISHED],
        "Document to publish"
        where: DocumentationWhereUniqueInput!,
        "Whether to include the default locale when publishBase is set"
        withDefaultLocale: Boolean = true
    ): Documentation
    "Unpublish one asset from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only."
    scheduleUnpublishAsset(
        "Stages to unpublish document from"
        from: [Stage!]! = [PUBLISHED],
        "Optional locales to unpublish. Unpublishing the default locale will completely remove the document from the selected stages"
        locales: [Locale!],
        "Release at point in time, will create new release containing this operation"
        releaseAt: DateTime,
        "Optionally attach this scheduled operation to an existing release"
        releaseId: String,
        "Unpublish complete document including default localization and relations from stages. Can be disabled."
        unpublishBase: Boolean = true,
        "Document to unpublish"
        where: AssetWhereUniqueInput!
    ): Asset
    "Unpublish one documentation from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only."
    scheduleUnpublishDocumentation(
        "Stages to unpublish document from"
        from: [Stage!]! = [PUBLISHED],
        "Optional locales to unpublish. Unpublishing the default locale will completely remove the document from the selected stages"
        locales: [Locale!],
        "Release at point in time, will create new release containing this operation"
        releaseAt: DateTime,
        "Optionally attach this scheduled operation to an existing release"
        releaseId: String,
        "Unpublish complete document including default localization and relations from stages. Can be disabled."
        unpublishBase: Boolean = true,
        "Document to unpublish"
        where: DocumentationWhereUniqueInput!
    ): Documentation
    "Unpublish one asset from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only."
    unpublishAsset(
        "Stages to unpublish document from"
        from: [Stage!]! = [PUBLISHED],
        "Optional locales to unpublish. Unpublishing the default locale will completely remove the document from the selected stages"
        locales: [Locale!],
        "Unpublish complete document including default localization and relations from stages. Can be disabled."
        unpublishBase: Boolean = true,
        "Document to unpublish"
        where: AssetWhereUniqueInput!
    ): Asset
    "Unpublish one documentation from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only."
    unpublishDocumentation(
        "Stages to unpublish document from"
        from: [Stage!]! = [PUBLISHED],
        "Optional locales to unpublish. Unpublishing the default locale will completely remove the document from the selected stages"
        locales: [Locale!],
        "Unpublish complete document including default localization and relations from stages. Can be disabled."
        unpublishBase: Boolean = true,
        "Document to unpublish"
        where: DocumentationWhereUniqueInput!
    ): Documentation
    "Unpublish many Asset documents"
    unpublishManyAssets(
        "Stages to unpublish documents from"
        from: [Stage!]! = [PUBLISHED],
        "Locales to unpublish"
        locales: [Locale!],
        "Whether to unpublish the base document and default localization"
        unpublishBase: Boolean = true,
        "Identifies documents in each stage"
        where: AssetManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyAssetsConnection)")
    "Find many Asset documents that match criteria in specified stage and unpublish from target stages"
    unpublishManyAssetsConnection(
        after: ID,
        before: ID,
        first: Int,
        "Stages to unpublish documents from"
        from: [Stage!]! = [PUBLISHED],
        last: Int,
        "Locales to unpublish"
        locales: [Locale!],
        skip: Int,
        "Stage to find matching documents in"
        stage: Stage = DRAFT,
        "Whether to unpublish the base document and default localization"
        unpublishBase: Boolean = true,
        "Identifies documents in draft stage"
        where: AssetManyWhereInput
    ): AssetConnection!
    "Unpublish many Documentation documents"
    unpublishManyDocumentations(
        "Stages to unpublish documents from"
        from: [Stage!]! = [PUBLISHED],
        "Locales to unpublish"
        locales: [Locale!],
        "Whether to unpublish the base document and default localization"
        unpublishBase: Boolean = true,
        "Identifies documents in each stage"
        where: DocumentationManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyDocumentationsConnection)")
    "Find many Documentation documents that match criteria in specified stage and unpublish from target stages"
    unpublishManyDocumentationsConnection(
        after: ID,
        before: ID,
        first: Int,
        "Stages to unpublish documents from"
        from: [Stage!]! = [PUBLISHED],
        last: Int,
        "Locales to unpublish"
        locales: [Locale!],
        skip: Int,
        "Stage to find matching documents in"
        stage: Stage = DRAFT,
        "Whether to unpublish the base document and default localization"
        unpublishBase: Boolean = true,
        "Identifies documents in draft stage"
        where: DocumentationManyWhereInput
    ): DocumentationConnection!
    "Update one asset"
    updateAsset(data: AssetUpdateInput!, where: AssetWhereUniqueInput!): Asset
    "Update one documentation"
    updateDocumentation(data: DocumentationUpdateInput!, where: DocumentationWhereUniqueInput!): Documentation
    "Update many assets"
    updateManyAssets(
        "Updates to document content"
        data: AssetUpdateManyInput!,
        "Documents to apply update on"
        where: AssetManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyAssetsConnection)")
    "Update many Asset documents"
    updateManyAssetsConnection(
        after: ID,
        before: ID,
        "Updates to document content"
        data: AssetUpdateManyInput!,
        first: Int,
        last: Int,
        skip: Int,
        "Documents to apply update on"
        where: AssetManyWhereInput
    ): AssetConnection!
    "Update many documentations"
    updateManyDocumentations(
        "Updates to document content"
        data: DocumentationUpdateManyInput!,
        "Documents to apply update on"
        where: DocumentationManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyDocumentationsConnection)")
    "Update many Documentation documents"
    updateManyDocumentationsConnection(
        after: ID,
        before: ID,
        "Updates to document content"
        data: DocumentationUpdateManyInput!,
        first: Int,
        last: Int,
        skip: Int,
        "Documents to apply update on"
        where: DocumentationManyWhereInput
    ): DocumentationConnection!
    "Update one scheduledRelease"
    updateScheduledRelease(data: ScheduledReleaseUpdateInput!, where: ScheduledReleaseWhereUniqueInput!): ScheduledRelease
    "Upsert one asset"
    upsertAsset(upsert: AssetUpsertInput!, where: AssetWhereUniqueInput!): Asset
    "Upsert one documentation"
    upsertDocumentation(upsert: DocumentationUpsertInput!, where: DocumentationWhereUniqueInput!): Documentation
}

"Information about pagination in a connection."
type PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "Number of items in the current page."
    pageSize: Int
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

type Query {
    "Retrieve a single asset"
    asset(
        """

        Defines which locales should be returned.

        Note that `Asset` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        stage: Stage! = PUBLISHED,
        where: AssetWhereUniqueInput!
    ): Asset
    "Retrieve document version"
    assetVersion(where: VersionWhereInput!): DocumentVersion
    "Retrieve multiple assets"
    assets(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Asset` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        orderBy: AssetOrderByInput,
        skip: Int,
        stage: Stage! = PUBLISHED,
        where: AssetWhereInput
    ): [Asset!]!
    "Retrieve multiple assets using the Relay connection interface"
    assetsConnection(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Asset` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        orderBy: AssetOrderByInput,
        skip: Int,
        stage: Stage! = PUBLISHED,
        where: AssetWhereInput
    ): AssetConnection!
    "Retrieve a single documentation"
    documentation(
        """

        Defines which locales should be returned.

        Note that `Documentation` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        stage: Stage! = PUBLISHED,
        where: DocumentationWhereUniqueInput!
    ): Documentation
    "Retrieve document version"
    documentationVersion(where: VersionWhereInput!): DocumentVersion
    "Retrieve multiple documentations"
    documentations(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Documentation` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        orderBy: DocumentationOrderByInput,
        skip: Int,
        stage: Stage! = PUBLISHED,
        where: DocumentationWhereInput
    ): [Documentation!]!
    "Retrieve multiple documentations using the Relay connection interface"
    documentationsConnection(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `Documentation` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        orderBy: DocumentationOrderByInput,
        skip: Int,
        stage: Stage! = PUBLISHED,
        where: DocumentationWhereInput
    ): DocumentationConnection!
    "Fetches an object given its ID"
    entities(
        "The where parameters to query components"
        where: [EntityWhereInput!]!
    ): [Entity!]
    "Fetches an object given its ID"
    node(
        "The ID of an object"
        id: ID!,
        """

        Defines which locales should be returned.

        Note that `Node` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        stage: Stage! = PUBLISHED
    ): Node
    "Retrieve a single scheduledOperation"
    scheduledOperation(
        """

        Defines which locales should be returned.

        Note that `ScheduledOperation` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        stage: Stage! = PUBLISHED,
        where: ScheduledOperationWhereUniqueInput!
    ): ScheduledOperation
    "Retrieve multiple scheduledOperations"
    scheduledOperations(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `ScheduledOperation` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        orderBy: ScheduledOperationOrderByInput,
        skip: Int,
        stage: Stage! = PUBLISHED,
        where: ScheduledOperationWhereInput
    ): [ScheduledOperation!]!
    "Retrieve multiple scheduledOperations using the Relay connection interface"
    scheduledOperationsConnection(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `ScheduledOperation` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        orderBy: ScheduledOperationOrderByInput,
        skip: Int,
        stage: Stage! = PUBLISHED,
        where: ScheduledOperationWhereInput
    ): ScheduledOperationConnection!
    "Retrieve a single scheduledRelease"
    scheduledRelease(
        """

        Defines which locales should be returned.

        Note that `ScheduledRelease` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        stage: Stage! = PUBLISHED,
        where: ScheduledReleaseWhereUniqueInput!
    ): ScheduledRelease
    "Retrieve multiple scheduledReleases"
    scheduledReleases(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `ScheduledRelease` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        orderBy: ScheduledReleaseOrderByInput,
        skip: Int,
        stage: Stage! = PUBLISHED,
        where: ScheduledReleaseWhereInput
    ): [ScheduledRelease!]!
    "Retrieve multiple scheduledReleases using the Relay connection interface"
    scheduledReleasesConnection(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `ScheduledRelease` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        orderBy: ScheduledReleaseOrderByInput,
        skip: Int,
        stage: Stage! = PUBLISHED,
        where: ScheduledReleaseWhereInput
    ): ScheduledReleaseConnection!
    "Retrieve a single user"
    user(
        """

        Defines which locales should be returned.

        Note that `User` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        stage: Stage! = PUBLISHED,
        where: UserWhereUniqueInput!
    ): User
    "Retrieve multiple users"
    users(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `User` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        orderBy: UserOrderByInput,
        skip: Int,
        stage: Stage! = PUBLISHED,
        where: UserWhereInput
    ): [User!]!
    "Retrieve multiple users using the Relay connection interface"
    usersConnection(
        after: String,
        before: String,
        first: Int,
        last: Int,
        """

        Defines which locales should be returned.

        Note that `User` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en],
        orderBy: UserOrderByInput,
        skip: Int,
        stage: Stage! = PUBLISHED,
        where: UserWhereInput
    ): UserConnection!
}

"Representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba()"
type RGBA {
    a: RGBATransparency!
    b: RGBAHue!
    g: RGBAHue!
    r: RGBAHue!
}

"Custom type representing a rich text value comprising of raw rich text ast, html, markdown and text values"
type RichText {
    "Returns HTMl representation"
    html: String!
    "Returns Markdown representation"
    markdown: String!
    "Returns AST representation"
    raw: RichTextAST!
    "Returns plain-text contents of RichText"
    text: String!
}

"Scheduled Operation system model"
type ScheduledOperation implements Node {
    affectedDocuments(
        after: String,
        before: String,
        first: Int,
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `affectedDocuments` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        last: Int,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `affectedDocuments` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!],
        skip: Int
    ): [ScheduledOperationAffectedDocument!]!
    "The time the document was created"
    createdAt: DateTime!
    "User that created this document"
    createdBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    "Operation description"
    description: String
    "Get the document in other stages"
    documentInStages(
        "Decides if the current stage should be included or not"
        includeCurrent: Boolean! = false,
        "Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree"
        inheritLocale: Boolean! = false,
        "Potential stages that should be returned"
        stages: [Stage!]! = [DRAFT, PUBLISHED]
    ): [ScheduledOperation!]!
    "Operation error message"
    errorMessage: String
    "The unique identifier"
    id: ID!
    "The time the document was published. Null on documents in draft stage."
    publishedAt: DateTime
    "User that last published this document"
    publishedBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    "Raw operation payload including all details, this field is subject to change"
    rawPayload: Json!
    "The release this operation is scheduled for"
    release(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `release` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `release` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): ScheduledRelease
    "System stage field"
    stage: Stage!
    "operation Status"
    status: ScheduledOperationStatus!
    "The time the document was updated"
    updatedAt: DateTime!
    "User that last updated this document"
    updatedBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
}

"A connection to a list of items."
type ScheduledOperationConnection {
    aggregate: Aggregate!
    "A list of edges."
    edges: [ScheduledOperationEdge!]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type ScheduledOperationEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: ScheduledOperation!
}

"Scheduled Release system model"
type ScheduledRelease implements Node {
    "The time the document was created"
    createdAt: DateTime!
    "User that created this document"
    createdBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    "Release description"
    description: String
    "Get the document in other stages"
    documentInStages(
        "Decides if the current stage should be included or not"
        includeCurrent: Boolean! = false,
        "Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree"
        inheritLocale: Boolean! = false,
        "Potential stages that should be returned"
        stages: [Stage!]! = [DRAFT, PUBLISHED]
    ): [ScheduledRelease!]!
    "Release error message"
    errorMessage: String
    "The unique identifier"
    id: ID!
    "Whether scheduled release should be run"
    isActive: Boolean!
    "Whether scheduled release is implicit"
    isImplicit: Boolean!
    "Operations to run with this release"
    operations(
        after: String,
        before: String,
        first: Int,
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `operations` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        last: Int,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `operations` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!],
        orderBy: ScheduledOperationOrderByInput,
        skip: Int,
        where: ScheduledOperationWhereInput
    ): [ScheduledOperation!]!
    "The time the document was published. Null on documents in draft stage."
    publishedAt: DateTime
    "User that last published this document"
    publishedBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    "Release date and time"
    releaseAt: DateTime
    "System stage field"
    stage: Stage!
    "Release Status"
    status: ScheduledReleaseStatus!
    "Release Title"
    title: String
    "The time the document was updated"
    updatedAt: DateTime!
    "User that last updated this document"
    updatedBy(
        """

        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean,
        """

        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
}

"A connection to a list of items."
type ScheduledReleaseConnection {
    aggregate: Aggregate!
    "A list of edges."
    edges: [ScheduledReleaseEdge!]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type ScheduledReleaseEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: ScheduledRelease!
}

"User system model"
type User implements Node {
    "The time the document was created"
    createdAt: DateTime!
    "Get the document in other stages"
    documentInStages(
        "Decides if the current stage should be included or not"
        includeCurrent: Boolean! = false,
        "Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree"
        inheritLocale: Boolean! = false,
        "Potential stages that should be returned"
        stages: [Stage!]! = [DRAFT, PUBLISHED]
    ): [User!]!
    "The unique identifier"
    id: ID!
    "Flag to determine if user is active or not"
    isActive: Boolean!
    "User Kind. Can be either MEMBER, PAT or PUBLIC"
    kind: UserKind!
    "The username"
    name: String!
    "Profile Picture url"
    picture: String
    "The time the document was published. Null on documents in draft stage."
    publishedAt: DateTime
    "System stage field"
    stage: Stage!
    "The time the document was updated"
    updatedAt: DateTime!
}

"A connection to a list of items."
type UserConnection {
    aggregate: Aggregate!
    "A list of edges."
    edges: [UserEdge!]!
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type UserEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: User!
}

type Version {
    createdAt: DateTime!
    id: ID!
    revision: Int!
    stage: Stage!
}

enum AssetOrderByInput {
    createdAt_ASC
    createdAt_DESC
    fileName_ASC
    fileName_DESC
    handle_ASC
    handle_DESC
    height_ASC
    height_DESC
    id_ASC
    id_DESC
    mimeType_ASC
    mimeType_DESC
    publishedAt_ASC
    publishedAt_DESC
    size_ASC
    size_DESC
    updatedAt_ASC
    updatedAt_DESC
    width_ASC
    width_DESC
}

enum DocumentFileTypes {
    doc
    docx
    html
    jpg
    odp
    ods
    odt
    pdf
    png
    ppt
    pptx
    svg
    txt
    webp
    xls
    xlsx
}

enum DocumentationOrderByInput {
    content_ASC
    content_DESC
    createdAt_ASC
    createdAt_DESC
    id_ASC
    id_DESC
    publishedAt_ASC
    publishedAt_DESC
    title_ASC
    title_DESC
    updatedAt_ASC
    updatedAt_DESC
}

"This enumeration holds all typenames that implement the Entity interface. Components implement the Entity interface. At the moment models are not supported, models are listed in this enum to avoid an empty enum without any components."
enum EntityTypeName {
    "Asset system model"
    Asset
    Documentation
    "Scheduled Operation system model"
    ScheduledOperation
    "Scheduled Release system model"
    ScheduledRelease
    "User system model"
    User
}

enum ImageFit {
    "Resizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio."
    clip
    "Resizes the image to fit the specified parameters exactly by removing any parts of the image that don't fit within the boundaries."
    crop
    "Resizes the image to fit within the parameters, but as opposed to 'fit:clip' will not scale the image if the image is smaller than the output size."
    max
    "Resizes the image to fit the specified parameters exactly by scaling the image to the desired size. The aspect ratio of the image is not respected and the image can be distorted using this method."
    scale
}

"Locale system enumeration"
enum Locale {
    "System locale"
    en
    es
}

enum ScheduledOperationOrderByInput {
    createdAt_ASC
    createdAt_DESC
    description_ASC
    description_DESC
    errorMessage_ASC
    errorMessage_DESC
    id_ASC
    id_DESC
    publishedAt_ASC
    publishedAt_DESC
    status_ASC
    status_DESC
    updatedAt_ASC
    updatedAt_DESC
}

"System Scheduled Operation Status"
enum ScheduledOperationStatus {
    CANCELED
    COMPLETED
    FAILED
    IN_PROGRESS
    PENDING
}

enum ScheduledReleaseOrderByInput {
    createdAt_ASC
    createdAt_DESC
    description_ASC
    description_DESC
    errorMessage_ASC
    errorMessage_DESC
    id_ASC
    id_DESC
    isActive_ASC
    isActive_DESC
    isImplicit_ASC
    isImplicit_DESC
    publishedAt_ASC
    publishedAt_DESC
    releaseAt_ASC
    releaseAt_DESC
    status_ASC
    status_DESC
    title_ASC
    title_DESC
    updatedAt_ASC
    updatedAt_DESC
}

"System Scheduled Release Status"
enum ScheduledReleaseStatus {
    COMPLETED
    FAILED
    IN_PROGRESS
    PENDING
}

"Stage system enumeration"
enum Stage {
    "The Draft is the default stage for all your content."
    DRAFT
    "The Published stage is where you can publish your content to."
    PUBLISHED
}

enum SystemDateTimeFieldVariation {
    BASE
    COMBINED
    LOCALIZATION
}

"System User Kind"
enum UserKind {
    APP_TOKEN
    MEMBER
    PAT
    PUBLIC
    WEBHOOK
}

enum UserOrderByInput {
    createdAt_ASC
    createdAt_DESC
    id_ASC
    id_DESC
    isActive_ASC
    isActive_DESC
    kind_ASC
    kind_DESC
    name_ASC
    name_DESC
    picture_ASC
    picture_DESC
    publishedAt_ASC
    publishedAt_DESC
    updatedAt_ASC
    updatedAt_DESC
}

enum _FilterKind {
    AND
    NOT
    OR
    contains
    contains_all
    contains_none
    contains_some
    ends_with
    eq
    eq_not
    gt
    gte
    in
    json_path_exists
    json_value_recursive
    lt
    lte
    not_contains
    not_ends_with
    not_in
    not_starts_with
    relational_every
    relational_none
    relational_single
    relational_some
    search
    starts_with
    union_empty
    union_every
    union_none
    union_single
    union_some
}

enum _MutationInputFieldKind {
    enum
    relation
    richText
    richTextWithEmbeds
    scalar
    union
    virtual
}

enum _MutationKind {
    create
    delete
    deleteMany
    publish
    publishMany
    schedulePublish
    scheduleUnpublish
    unpublish
    unpublishMany
    update
    updateMany
    upsert
}

enum _OrderDirection {
    asc
    desc
}

enum _RelationInputCardinality {
    many
    one
}

enum _RelationInputKind {
    create
    update
}

enum _RelationKind {
    regular
    union
}

enum _SystemDateTimeFieldVariation {
    base
    combined
    localization
}

"A date string, such as 2007-12-03 (YYYY-MM-DD), compliant with ISO 8601 standard for representation of dates using the Gregorian calendar."
scalar Date

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the date-timeformat outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representationof dates and times using the Gregorian calendar."
scalar DateTime

scalar Hex

"Raw JSON value"
scalar Json

"The Long scalar type represents non-fractional signed whole numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

scalar RGBAHue

scalar RGBATransparency

"Slate-compatible RichText AST"
scalar RichTextAST

input AssetConnectInput {
    "Allow to specify document position in list of connected documents, will default to appending at end of list"
    position: ConnectPositionInput
    "Document to connect"
    where: AssetWhereUniqueInput!
}

input AssetCreateInput {
    createdAt: DateTime
    fileName: String!
    handle: String!
    height: Float
    "Inline mutations for managing document localizations excluding the default locale"
    localizations: AssetCreateLocalizationsInput
    mimeType: String
    size: Float
    updatedAt: DateTime
    width: Float
}

input AssetCreateLocalizationDataInput {
    createdAt: DateTime
    fileName: String!
    handle: String!
    height: Float
    mimeType: String
    size: Float
    updatedAt: DateTime
    width: Float
}

input AssetCreateLocalizationInput {
    "Localization input"
    data: AssetCreateLocalizationDataInput!
    locale: Locale!
}

input AssetCreateLocalizationsInput {
    "Create localizations for the newly-created document"
    create: [AssetCreateLocalizationInput!]
}

input AssetCreateManyInlineInput {
    "Connect multiple existing Asset documents"
    connect: [AssetWhereUniqueInput!]
    "Create and connect multiple existing Asset documents"
    create: [AssetCreateInput!]
}

input AssetCreateOneInlineInput {
    "Connect one existing Asset document"
    connect: AssetWhereUniqueInput
    "Create and connect one Asset document"
    create: AssetCreateInput
}

"Identifies documents"
input AssetManyWhereInput {
    "Logical AND on all given filters."
    AND: [AssetWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [AssetWhereInput!]
    "Logical OR on all given filters."
    OR: [AssetWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    documentInStages_every: AssetWhereStageInput
    documentInStages_none: AssetWhereStageInput
    documentInStages_some: AssetWhereStageInput
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID]
    "Any other value that exists and is not equal to the given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    publishedAt: DateTime
    "All values greater than the given value."
    publishedAt_gt: DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: DateTime
    "All values that are contained in given list."
    publishedAt_in: [DateTime]
    "All values less than the given value."
    publishedAt_lt: DateTime
    "All values less than or equal the given value."
    publishedAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    publishedAt_not: DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    scheduledIn_every: ScheduledOperationWhereInput
    scheduledIn_none: ScheduledOperationWhereInput
    scheduledIn_some: ScheduledOperationWhereInput
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

"Transformations for Assets"
input AssetTransformationInput {
    document: DocumentTransformationInput
    image: ImageTransformationInput
    "Pass true if you want to validate the passed transformation parameters"
    validateOptions: Boolean = false
}

input AssetUpdateInput {
    fileName: String
    handle: String
    height: Float
    "Manage document localizations"
    localizations: AssetUpdateLocalizationsInput
    mimeType: String
    size: Float
    width: Float
}

input AssetUpdateLocalizationDataInput {
    fileName: String
    handle: String
    height: Float
    mimeType: String
    size: Float
    width: Float
}

input AssetUpdateLocalizationInput {
    data: AssetUpdateLocalizationDataInput!
    locale: Locale!
}

input AssetUpdateLocalizationsInput {
    "Localizations to create"
    create: [AssetCreateLocalizationInput!]
    "Localizations to delete"
    delete: [Locale!]
    "Localizations to update"
    update: [AssetUpdateLocalizationInput!]
    upsert: [AssetUpsertLocalizationInput!]
}

input AssetUpdateManyInlineInput {
    "Connect multiple existing Asset documents"
    connect: [AssetConnectInput!]
    "Create and connect multiple Asset documents"
    create: [AssetCreateInput!]
    "Delete multiple Asset documents"
    delete: [AssetWhereUniqueInput!]
    "Disconnect multiple Asset documents"
    disconnect: [AssetWhereUniqueInput!]
    "Override currently-connected documents with multiple existing Asset documents"
    set: [AssetWhereUniqueInput!]
    "Update multiple Asset documents"
    update: [AssetUpdateWithNestedWhereUniqueInput!]
    "Upsert multiple Asset documents"
    upsert: [AssetUpsertWithNestedWhereUniqueInput!]
}

input AssetUpdateManyInput {
    fileName: String
    height: Float
    "Optional updates to localizations"
    localizations: AssetUpdateManyLocalizationsInput
    mimeType: String
    size: Float
    width: Float
}

input AssetUpdateManyLocalizationDataInput {
    fileName: String
    height: Float
    mimeType: String
    size: Float
    width: Float
}

input AssetUpdateManyLocalizationInput {
    data: AssetUpdateManyLocalizationDataInput!
    locale: Locale!
}

input AssetUpdateManyLocalizationsInput {
    "Localizations to update"
    update: [AssetUpdateManyLocalizationInput!]
}

input AssetUpdateManyWithNestedWhereInput {
    "Update many input"
    data: AssetUpdateManyInput!
    "Document search"
    where: AssetWhereInput!
}

input AssetUpdateOneInlineInput {
    "Connect existing Asset document"
    connect: AssetWhereUniqueInput
    "Create and connect one Asset document"
    create: AssetCreateInput
    "Delete currently connected Asset document"
    delete: Boolean
    "Disconnect currently connected Asset document"
    disconnect: Boolean
    "Update single Asset document"
    update: AssetUpdateWithNestedWhereUniqueInput
    "Upsert single Asset document"
    upsert: AssetUpsertWithNestedWhereUniqueInput
}

input AssetUpdateWithNestedWhereUniqueInput {
    "Document to update"
    data: AssetUpdateInput!
    "Unique document search"
    where: AssetWhereUniqueInput!
}

input AssetUpsertInput {
    "Create document if it didn't exist"
    create: AssetCreateInput!
    "Update document if it exists"
    update: AssetUpdateInput!
}

input AssetUpsertLocalizationInput {
    create: AssetCreateLocalizationDataInput!
    locale: Locale!
    update: AssetUpdateLocalizationDataInput!
}

input AssetUpsertWithNestedWhereUniqueInput {
    "Upsert data"
    data: AssetUpsertInput!
    "Unique document search"
    where: AssetWhereUniqueInput!
}

"This contains a set of filters that can be used to compare values internally"
input AssetWhereComparatorInput {
    "This field can be used to request to check if the entry is outdated by internal comparison"
    outdated_to: Boolean
}

"Identifies documents"
input AssetWhereInput {
    "Logical AND on all given filters."
    AND: [AssetWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [AssetWhereInput!]
    "Logical OR on all given filters."
    OR: [AssetWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    documentInStages_every: AssetWhereStageInput
    documentInStages_none: AssetWhereStageInput
    documentInStages_some: AssetWhereStageInput
    fileName: String
    "All values containing the given string."
    fileName_contains: String
    "All values ending with the given string."
    fileName_ends_with: String
    "All values that are contained in given list."
    fileName_in: [String]
    "Any other value that exists and is not equal to the given value."
    fileName_not: String
    "All values not containing the given string."
    fileName_not_contains: String
    "All values not ending with the given string"
    fileName_not_ends_with: String
    "All values that are not contained in given list."
    fileName_not_in: [String]
    "All values not starting with the given string."
    fileName_not_starts_with: String
    "All values starting with the given string."
    fileName_starts_with: String
    handle: String
    "All values containing the given string."
    handle_contains: String
    "All values ending with the given string."
    handle_ends_with: String
    "All values that are contained in given list."
    handle_in: [String]
    "Any other value that exists and is not equal to the given value."
    handle_not: String
    "All values not containing the given string."
    handle_not_contains: String
    "All values not ending with the given string"
    handle_not_ends_with: String
    "All values that are not contained in given list."
    handle_not_in: [String]
    "All values not starting with the given string."
    handle_not_starts_with: String
    "All values starting with the given string."
    handle_starts_with: String
    height: Float
    "All values greater than the given value."
    height_gt: Float
    "All values greater than or equal the given value."
    height_gte: Float
    "All values that are contained in given list."
    height_in: [Float]
    "All values less than the given value."
    height_lt: Float
    "All values less than or equal the given value."
    height_lte: Float
    "Any other value that exists and is not equal to the given value."
    height_not: Float
    "All values that are not contained in given list."
    height_not_in: [Float]
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID]
    "Any other value that exists and is not equal to the given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    mimeType: String
    "All values containing the given string."
    mimeType_contains: String
    "All values ending with the given string."
    mimeType_ends_with: String
    "All values that are contained in given list."
    mimeType_in: [String]
    "Any other value that exists and is not equal to the given value."
    mimeType_not: String
    "All values not containing the given string."
    mimeType_not_contains: String
    "All values not ending with the given string"
    mimeType_not_ends_with: String
    "All values that are not contained in given list."
    mimeType_not_in: [String]
    "All values not starting with the given string."
    mimeType_not_starts_with: String
    "All values starting with the given string."
    mimeType_starts_with: String
    publishedAt: DateTime
    "All values greater than the given value."
    publishedAt_gt: DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: DateTime
    "All values that are contained in given list."
    publishedAt_in: [DateTime]
    "All values less than the given value."
    publishedAt_lt: DateTime
    "All values less than or equal the given value."
    publishedAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    publishedAt_not: DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    scheduledIn_every: ScheduledOperationWhereInput
    scheduledIn_none: ScheduledOperationWhereInput
    scheduledIn_some: ScheduledOperationWhereInput
    size: Float
    "All values greater than the given value."
    size_gt: Float
    "All values greater than or equal the given value."
    size_gte: Float
    "All values that are contained in given list."
    size_in: [Float]
    "All values less than the given value."
    size_lt: Float
    "All values less than or equal the given value."
    size_lte: Float
    "Any other value that exists and is not equal to the given value."
    size_not: Float
    "All values that are not contained in given list."
    size_not_in: [Float]
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
    width: Float
    "All values greater than the given value."
    width_gt: Float
    "All values greater than or equal the given value."
    width_gte: Float
    "All values that are contained in given list."
    width_in: [Float]
    "All values less than the given value."
    width_lt: Float
    "All values less than or equal the given value."
    width_lte: Float
    "Any other value that exists and is not equal to the given value."
    width_not: Float
    "All values that are not contained in given list."
    width_not_in: [Float]
}

"The document in stages filter allows specifying a stage entry to cross compare the same document between different stages"
input AssetWhereStageInput {
    "Logical AND on all given filters."
    AND: [AssetWhereStageInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [AssetWhereStageInput!]
    "Logical OR on all given filters."
    OR: [AssetWhereStageInput!]
    "This field contains fields which can be set as true or false to specify an internal comparison"
    compareWithParent: AssetWhereComparatorInput
    "Specify the stage to compare with"
    stage: Stage
}

"References Asset record uniquely"
input AssetWhereUniqueInput {
    id: ID
}

"Accepts either HEX or RGBA color value. At least one of hex or rgba value should be passed. If both are passed RGBA is used."
input ColorInput {
    hex: Hex
    rgba: RGBAInput
}

input ConnectPositionInput {
    "Connect document after specified document"
    after: ID
    "Connect document before specified document"
    before: ID
    "Connect document at last position"
    end: Boolean
    "Connect document at first position"
    start: Boolean
}

input DocumentOutputInput {
    """

    Transforms a document into a desired file type.
    See this matrix for format support:

    PDF:    jpg, odp, ods, odt, png, svg, txt, and webp
    DOC:    docx, html, jpg, odt, pdf, png, svg, txt, and webp
    DOCX:    doc, html, jpg, odt, pdf, png, svg, txt, and webp
    ODT:    doc, docx, html, jpg, pdf, png, svg, txt, and webp
    XLS:    jpg, pdf, ods, png, svg, xlsx, and webp
    XLSX:    jpg, pdf, ods, png, svg, xls, and webp
    ODS:    jpg, pdf, png, xls, svg, xlsx, and webp
    PPT:    jpg, odp, pdf, png, svg, pptx, and webp
    PPTX:    jpg, odp, pdf, png, svg, ppt, and webp
    ODP:    jpg, pdf, png, ppt, svg, pptx, and webp
    BMP:    jpg, odp, ods, odt, pdf, png, svg, and webp
    GIF:    jpg, odp, ods, odt, pdf, png, svg, and webp
    JPG:    jpg, odp, ods, odt, pdf, png, svg, and webp
    PNG:    jpg, odp, ods, odt, pdf, png, svg, and webp
    WEBP:    jpg, odp, ods, odt, pdf, png, svg, and webp
    TIFF:    jpg, odp, ods, odt, pdf, png, svg, and webp
    AI:        jpg, odp, ods, odt, pdf, png, svg, and webp
    PSD:    jpg, odp, ods, odt, pdf, png, svg, and webp
    SVG:    jpg, odp, ods, odt, pdf, png, and webp
    HTML:    jpg, odt, pdf, svg, txt, and webp
    TXT:    jpg, html, odt, pdf, svg, and webp
    """
    format: DocumentFileTypes
}

"Transformations for Documents"
input DocumentTransformationInput {
    "Changes the output for the file."
    output: DocumentOutputInput
}

input DocumentationConnectInput {
    "Allow to specify document position in list of connected documents, will default to appending at end of list"
    position: ConnectPositionInput
    "Document to connect"
    where: DocumentationWhereUniqueInput!
}

input DocumentationCreateInput {
    "content input for default locale (en)"
    content: String
    createdAt: DateTime
    "Inline mutations for managing document localizations excluding the default locale"
    localizations: DocumentationCreateLocalizationsInput
    title: String
    updatedAt: DateTime
}

input DocumentationCreateLocalizationDataInput {
    content: String
    createdAt: DateTime
    updatedAt: DateTime
}

input DocumentationCreateLocalizationInput {
    "Localization input"
    data: DocumentationCreateLocalizationDataInput!
    locale: Locale!
}

input DocumentationCreateLocalizationsInput {
    "Create localizations for the newly-created document"
    create: [DocumentationCreateLocalizationInput!]
}

input DocumentationCreateManyInlineInput {
    "Connect multiple existing Documentation documents"
    connect: [DocumentationWhereUniqueInput!]
    "Create and connect multiple existing Documentation documents"
    create: [DocumentationCreateInput!]
}

input DocumentationCreateOneInlineInput {
    "Connect one existing Documentation document"
    connect: DocumentationWhereUniqueInput
    "Create and connect one Documentation document"
    create: DocumentationCreateInput
}

"Identifies documents"
input DocumentationManyWhereInput {
    "Logical AND on all given filters."
    AND: [DocumentationWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [DocumentationWhereInput!]
    "Logical OR on all given filters."
    OR: [DocumentationWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    documentInStages_every: DocumentationWhereStageInput
    documentInStages_none: DocumentationWhereStageInput
    documentInStages_some: DocumentationWhereStageInput
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID]
    "Any other value that exists and is not equal to the given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    publishedAt: DateTime
    "All values greater than the given value."
    publishedAt_gt: DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: DateTime
    "All values that are contained in given list."
    publishedAt_in: [DateTime]
    "All values less than the given value."
    publishedAt_lt: DateTime
    "All values less than or equal the given value."
    publishedAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    publishedAt_not: DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    scheduledIn_every: ScheduledOperationWhereInput
    scheduledIn_none: ScheduledOperationWhereInput
    scheduledIn_some: ScheduledOperationWhereInput
    title: String
    "All values containing the given string."
    title_contains: String
    "All values ending with the given string."
    title_ends_with: String
    "All values that are contained in given list."
    title_in: [String]
    "Any other value that exists and is not equal to the given value."
    title_not: String
    "All values not containing the given string."
    title_not_contains: String
    "All values not ending with the given string"
    title_not_ends_with: String
    "All values that are not contained in given list."
    title_not_in: [String]
    "All values not starting with the given string."
    title_not_starts_with: String
    "All values starting with the given string."
    title_starts_with: String
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

input DocumentationUpdateInput {
    "content input for default locale (en)"
    content: String
    "Manage document localizations"
    localizations: DocumentationUpdateLocalizationsInput
    title: String
}

input DocumentationUpdateLocalizationDataInput {
    content: String
}

input DocumentationUpdateLocalizationInput {
    data: DocumentationUpdateLocalizationDataInput!
    locale: Locale!
}

input DocumentationUpdateLocalizationsInput {
    "Localizations to create"
    create: [DocumentationCreateLocalizationInput!]
    "Localizations to delete"
    delete: [Locale!]
    "Localizations to update"
    update: [DocumentationUpdateLocalizationInput!]
    upsert: [DocumentationUpsertLocalizationInput!]
}

input DocumentationUpdateManyInlineInput {
    "Connect multiple existing Documentation documents"
    connect: [DocumentationConnectInput!]
    "Create and connect multiple Documentation documents"
    create: [DocumentationCreateInput!]
    "Delete multiple Documentation documents"
    delete: [DocumentationWhereUniqueInput!]
    "Disconnect multiple Documentation documents"
    disconnect: [DocumentationWhereUniqueInput!]
    "Override currently-connected documents with multiple existing Documentation documents"
    set: [DocumentationWhereUniqueInput!]
    "Update multiple Documentation documents"
    update: [DocumentationUpdateWithNestedWhereUniqueInput!]
    "Upsert multiple Documentation documents"
    upsert: [DocumentationUpsertWithNestedWhereUniqueInput!]
}

input DocumentationUpdateManyInput {
    "content input for default locale (en)"
    content: String
    "Optional updates to localizations"
    localizations: DocumentationUpdateManyLocalizationsInput
    title: String
}

input DocumentationUpdateManyLocalizationDataInput {
    content: String
}

input DocumentationUpdateManyLocalizationInput {
    data: DocumentationUpdateManyLocalizationDataInput!
    locale: Locale!
}

input DocumentationUpdateManyLocalizationsInput {
    "Localizations to update"
    update: [DocumentationUpdateManyLocalizationInput!]
}

input DocumentationUpdateManyWithNestedWhereInput {
    "Update many input"
    data: DocumentationUpdateManyInput!
    "Document search"
    where: DocumentationWhereInput!
}

input DocumentationUpdateOneInlineInput {
    "Connect existing Documentation document"
    connect: DocumentationWhereUniqueInput
    "Create and connect one Documentation document"
    create: DocumentationCreateInput
    "Delete currently connected Documentation document"
    delete: Boolean
    "Disconnect currently connected Documentation document"
    disconnect: Boolean
    "Update single Documentation document"
    update: DocumentationUpdateWithNestedWhereUniqueInput
    "Upsert single Documentation document"
    upsert: DocumentationUpsertWithNestedWhereUniqueInput
}

input DocumentationUpdateWithNestedWhereUniqueInput {
    "Document to update"
    data: DocumentationUpdateInput!
    "Unique document search"
    where: DocumentationWhereUniqueInput!
}

input DocumentationUpsertInput {
    "Create document if it didn't exist"
    create: DocumentationCreateInput!
    "Update document if it exists"
    update: DocumentationUpdateInput!
}

input DocumentationUpsertLocalizationInput {
    create: DocumentationCreateLocalizationDataInput!
    locale: Locale!
    update: DocumentationUpdateLocalizationDataInput!
}

input DocumentationUpsertWithNestedWhereUniqueInput {
    "Upsert data"
    data: DocumentationUpsertInput!
    "Unique document search"
    where: DocumentationWhereUniqueInput!
}

"This contains a set of filters that can be used to compare values internally"
input DocumentationWhereComparatorInput {
    "This field can be used to request to check if the entry is outdated by internal comparison"
    outdated_to: Boolean
}

"Identifies documents"
input DocumentationWhereInput {
    "Logical AND on all given filters."
    AND: [DocumentationWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [DocumentationWhereInput!]
    "Logical OR on all given filters."
    OR: [DocumentationWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    content: String
    "All values containing the given string."
    content_contains: String
    "All values ending with the given string."
    content_ends_with: String
    "All values that are contained in given list."
    content_in: [String]
    "Any other value that exists and is not equal to the given value."
    content_not: String
    "All values not containing the given string."
    content_not_contains: String
    "All values not ending with the given string"
    content_not_ends_with: String
    "All values that are not contained in given list."
    content_not_in: [String]
    "All values not starting with the given string."
    content_not_starts_with: String
    "All values starting with the given string."
    content_starts_with: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    documentInStages_every: DocumentationWhereStageInput
    documentInStages_none: DocumentationWhereStageInput
    documentInStages_some: DocumentationWhereStageInput
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID]
    "Any other value that exists and is not equal to the given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    publishedAt: DateTime
    "All values greater than the given value."
    publishedAt_gt: DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: DateTime
    "All values that are contained in given list."
    publishedAt_in: [DateTime]
    "All values less than the given value."
    publishedAt_lt: DateTime
    "All values less than or equal the given value."
    publishedAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    publishedAt_not: DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    scheduledIn_every: ScheduledOperationWhereInput
    scheduledIn_none: ScheduledOperationWhereInput
    scheduledIn_some: ScheduledOperationWhereInput
    title: String
    "All values containing the given string."
    title_contains: String
    "All values ending with the given string."
    title_ends_with: String
    "All values that are contained in given list."
    title_in: [String]
    "Any other value that exists and is not equal to the given value."
    title_not: String
    "All values not containing the given string."
    title_not_contains: String
    "All values not ending with the given string"
    title_not_ends_with: String
    "All values that are not contained in given list."
    title_not_in: [String]
    "All values not starting with the given string."
    title_not_starts_with: String
    "All values starting with the given string."
    title_starts_with: String
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

"The document in stages filter allows specifying a stage entry to cross compare the same document between different stages"
input DocumentationWhereStageInput {
    "Logical AND on all given filters."
    AND: [DocumentationWhereStageInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [DocumentationWhereStageInput!]
    "Logical OR on all given filters."
    OR: [DocumentationWhereStageInput!]
    "This field contains fields which can be set as true or false to specify an internal comparison"
    compareWithParent: DocumentationWhereComparatorInput
    "Specify the stage to compare with"
    stage: Stage
}

"References Documentation record uniquely"
input DocumentationWhereUniqueInput {
    id: ID
}

"Allows to specify input to query components directly"
input EntityWhereInput {
    "The ID of an object"
    id: ID!
    stage: Stage!
    "The Type name of an object"
    typename: EntityTypeName!
}

input ImageResizeInput {
    "The default value for the fit parameter is fit:clip."
    fit: ImageFit
    "The height in pixels to resize the image to. The value must be an integer from 1 to 10000."
    height: Int
    "The width in pixels to resize the image to. The value must be an integer from 1 to 10000."
    width: Int
}

"Transformations for Images"
input ImageTransformationInput {
    "Resizes the image"
    resize: ImageResizeInput
}

"Input for a geolocation point with latitude and longitude"
input LocationInput {
    latitude: Float!
    longitude: Float!
}

input PublishLocaleInput {
    "Locales to publish"
    locale: Locale!
    "Stages to publish selected locales to"
    stages: [Stage!]!
}

"Input type representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba()"
input RGBAInput {
    a: RGBATransparency!
    b: RGBAHue!
    g: RGBAHue!
    r: RGBAHue!
}

input ScheduledOperationConnectInput {
    "Allow to specify document position in list of connected documents, will default to appending at end of list"
    position: ConnectPositionInput
    "Document to connect"
    where: ScheduledOperationWhereUniqueInput!
}

input ScheduledOperationCreateManyInlineInput {
    "Connect multiple existing ScheduledOperation documents"
    connect: [ScheduledOperationWhereUniqueInput!]
}

input ScheduledOperationCreateOneInlineInput {
    "Connect one existing ScheduledOperation document"
    connect: ScheduledOperationWhereUniqueInput
}

"Identifies documents"
input ScheduledOperationManyWhereInput {
    "Logical AND on all given filters."
    AND: [ScheduledOperationWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [ScheduledOperationWhereInput!]
    "Logical OR on all given filters."
    OR: [ScheduledOperationWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    description: String
    "All values containing the given string."
    description_contains: String
    "All values ending with the given string."
    description_ends_with: String
    "All values that are contained in given list."
    description_in: [String]
    "Any other value that exists and is not equal to the given value."
    description_not: String
    "All values not containing the given string."
    description_not_contains: String
    "All values not ending with the given string"
    description_not_ends_with: String
    "All values that are not contained in given list."
    description_not_in: [String]
    "All values not starting with the given string."
    description_not_starts_with: String
    "All values starting with the given string."
    description_starts_with: String
    errorMessage: String
    "All values containing the given string."
    errorMessage_contains: String
    "All values ending with the given string."
    errorMessage_ends_with: String
    "All values that are contained in given list."
    errorMessage_in: [String]
    "Any other value that exists and is not equal to the given value."
    errorMessage_not: String
    "All values not containing the given string."
    errorMessage_not_contains: String
    "All values not ending with the given string"
    errorMessage_not_ends_with: String
    "All values that are not contained in given list."
    errorMessage_not_in: [String]
    "All values not starting with the given string."
    errorMessage_not_starts_with: String
    "All values starting with the given string."
    errorMessage_starts_with: String
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID]
    "Any other value that exists and is not equal to the given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    publishedAt: DateTime
    "All values greater than the given value."
    publishedAt_gt: DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: DateTime
    "All values that are contained in given list."
    publishedAt_in: [DateTime]
    "All values less than the given value."
    publishedAt_lt: DateTime
    "All values less than or equal the given value."
    publishedAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    publishedAt_not: DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    "All values containing the given json path."
    rawPayload_json_path_exists: String
    """

    Recursively tries to find the provided JSON scalar value inside the field.
    It does use an exact match when comparing values.
    If you pass `null` as value the filter will be ignored.
    Note: This filter fails if you try to look for a non scalar JSON value!
    """
    rawPayload_value_recursive: Json
    release: ScheduledReleaseWhereInput
    status: ScheduledOperationStatus
    "All values that are contained in given list."
    status_in: [ScheduledOperationStatus]
    "Any other value that exists and is not equal to the given value."
    status_not: ScheduledOperationStatus
    "All values that are not contained in given list."
    status_not_in: [ScheduledOperationStatus]
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

input ScheduledOperationUpdateManyInlineInput {
    "Connect multiple existing ScheduledOperation documents"
    connect: [ScheduledOperationConnectInput!]
    "Disconnect multiple ScheduledOperation documents"
    disconnect: [ScheduledOperationWhereUniqueInput!]
    "Override currently-connected documents with multiple existing ScheduledOperation documents"
    set: [ScheduledOperationWhereUniqueInput!]
}

input ScheduledOperationUpdateOneInlineInput {
    "Connect existing ScheduledOperation document"
    connect: ScheduledOperationWhereUniqueInput
    "Disconnect currently connected ScheduledOperation document"
    disconnect: Boolean
}

"Identifies documents"
input ScheduledOperationWhereInput {
    "Logical AND on all given filters."
    AND: [ScheduledOperationWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [ScheduledOperationWhereInput!]
    "Logical OR on all given filters."
    OR: [ScheduledOperationWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    description: String
    "All values containing the given string."
    description_contains: String
    "All values ending with the given string."
    description_ends_with: String
    "All values that are contained in given list."
    description_in: [String]
    "Any other value that exists and is not equal to the given value."
    description_not: String
    "All values not containing the given string."
    description_not_contains: String
    "All values not ending with the given string"
    description_not_ends_with: String
    "All values that are not contained in given list."
    description_not_in: [String]
    "All values not starting with the given string."
    description_not_starts_with: String
    "All values starting with the given string."
    description_starts_with: String
    errorMessage: String
    "All values containing the given string."
    errorMessage_contains: String
    "All values ending with the given string."
    errorMessage_ends_with: String
    "All values that are contained in given list."
    errorMessage_in: [String]
    "Any other value that exists and is not equal to the given value."
    errorMessage_not: String
    "All values not containing the given string."
    errorMessage_not_contains: String
    "All values not ending with the given string"
    errorMessage_not_ends_with: String
    "All values that are not contained in given list."
    errorMessage_not_in: [String]
    "All values not starting with the given string."
    errorMessage_not_starts_with: String
    "All values starting with the given string."
    errorMessage_starts_with: String
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID]
    "Any other value that exists and is not equal to the given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    publishedAt: DateTime
    "All values greater than the given value."
    publishedAt_gt: DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: DateTime
    "All values that are contained in given list."
    publishedAt_in: [DateTime]
    "All values less than the given value."
    publishedAt_lt: DateTime
    "All values less than or equal the given value."
    publishedAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    publishedAt_not: DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    "All values containing the given json path."
    rawPayload_json_path_exists: String
    """

    Recursively tries to find the provided JSON scalar value inside the field.
    It does use an exact match when comparing values.
    If you pass `null` as value the filter will be ignored.
    Note: This filter fails if you try to look for a non scalar JSON value!
    """
    rawPayload_value_recursive: Json
    release: ScheduledReleaseWhereInput
    status: ScheduledOperationStatus
    "All values that are contained in given list."
    status_in: [ScheduledOperationStatus]
    "Any other value that exists and is not equal to the given value."
    status_not: ScheduledOperationStatus
    "All values that are not contained in given list."
    status_not_in: [ScheduledOperationStatus]
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

"References ScheduledOperation record uniquely"
input ScheduledOperationWhereUniqueInput {
    id: ID
}

input ScheduledReleaseConnectInput {
    "Allow to specify document position in list of connected documents, will default to appending at end of list"
    position: ConnectPositionInput
    "Document to connect"
    where: ScheduledReleaseWhereUniqueInput!
}

input ScheduledReleaseCreateInput {
    createdAt: DateTime
    description: String
    errorMessage: String
    isActive: Boolean = true
    releaseAt: DateTime
    title: String
    updatedAt: DateTime
}

input ScheduledReleaseCreateManyInlineInput {
    "Connect multiple existing ScheduledRelease documents"
    connect: [ScheduledReleaseWhereUniqueInput!]
    "Create and connect multiple existing ScheduledRelease documents"
    create: [ScheduledReleaseCreateInput!]
}

input ScheduledReleaseCreateOneInlineInput {
    "Connect one existing ScheduledRelease document"
    connect: ScheduledReleaseWhereUniqueInput
    "Create and connect one ScheduledRelease document"
    create: ScheduledReleaseCreateInput
}

"Identifies documents"
input ScheduledReleaseManyWhereInput {
    "Logical AND on all given filters."
    AND: [ScheduledReleaseWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [ScheduledReleaseWhereInput!]
    "Logical OR on all given filters."
    OR: [ScheduledReleaseWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    description: String
    "All values containing the given string."
    description_contains: String
    "All values ending with the given string."
    description_ends_with: String
    "All values that are contained in given list."
    description_in: [String]
    "Any other value that exists and is not equal to the given value."
    description_not: String
    "All values not containing the given string."
    description_not_contains: String
    "All values not ending with the given string"
    description_not_ends_with: String
    "All values that are not contained in given list."
    description_not_in: [String]
    "All values not starting with the given string."
    description_not_starts_with: String
    "All values starting with the given string."
    description_starts_with: String
    errorMessage: String
    "All values containing the given string."
    errorMessage_contains: String
    "All values ending with the given string."
    errorMessage_ends_with: String
    "All values that are contained in given list."
    errorMessage_in: [String]
    "Any other value that exists and is not equal to the given value."
    errorMessage_not: String
    "All values not containing the given string."
    errorMessage_not_contains: String
    "All values not ending with the given string"
    errorMessage_not_ends_with: String
    "All values that are not contained in given list."
    errorMessage_not_in: [String]
    "All values not starting with the given string."
    errorMessage_not_starts_with: String
    "All values starting with the given string."
    errorMessage_starts_with: String
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID]
    "Any other value that exists and is not equal to the given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    isActive: Boolean
    "Any other value that exists and is not equal to the given value."
    isActive_not: Boolean
    isImplicit: Boolean
    "Any other value that exists and is not equal to the given value."
    isImplicit_not: Boolean
    operations_every: ScheduledOperationWhereInput
    operations_none: ScheduledOperationWhereInput
    operations_some: ScheduledOperationWhereInput
    publishedAt: DateTime
    "All values greater than the given value."
    publishedAt_gt: DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: DateTime
    "All values that are contained in given list."
    publishedAt_in: [DateTime]
    "All values less than the given value."
    publishedAt_lt: DateTime
    "All values less than or equal the given value."
    publishedAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    publishedAt_not: DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    releaseAt: DateTime
    "All values greater than the given value."
    releaseAt_gt: DateTime
    "All values greater than or equal the given value."
    releaseAt_gte: DateTime
    "All values that are contained in given list."
    releaseAt_in: [DateTime]
    "All values less than the given value."
    releaseAt_lt: DateTime
    "All values less than or equal the given value."
    releaseAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    releaseAt_not: DateTime
    "All values that are not contained in given list."
    releaseAt_not_in: [DateTime]
    status: ScheduledReleaseStatus
    "All values that are contained in given list."
    status_in: [ScheduledReleaseStatus]
    "Any other value that exists and is not equal to the given value."
    status_not: ScheduledReleaseStatus
    "All values that are not contained in given list."
    status_not_in: [ScheduledReleaseStatus]
    title: String
    "All values containing the given string."
    title_contains: String
    "All values ending with the given string."
    title_ends_with: String
    "All values that are contained in given list."
    title_in: [String]
    "Any other value that exists and is not equal to the given value."
    title_not: String
    "All values not containing the given string."
    title_not_contains: String
    "All values not ending with the given string"
    title_not_ends_with: String
    "All values that are not contained in given list."
    title_not_in: [String]
    "All values not starting with the given string."
    title_not_starts_with: String
    "All values starting with the given string."
    title_starts_with: String
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

input ScheduledReleaseUpdateInput {
    description: String
    errorMessage: String
    isActive: Boolean
    releaseAt: DateTime
    title: String
}

input ScheduledReleaseUpdateManyInlineInput {
    "Connect multiple existing ScheduledRelease documents"
    connect: [ScheduledReleaseConnectInput!]
    "Create and connect multiple ScheduledRelease documents"
    create: [ScheduledReleaseCreateInput!]
    "Delete multiple ScheduledRelease documents"
    delete: [ScheduledReleaseWhereUniqueInput!]
    "Disconnect multiple ScheduledRelease documents"
    disconnect: [ScheduledReleaseWhereUniqueInput!]
    "Override currently-connected documents with multiple existing ScheduledRelease documents"
    set: [ScheduledReleaseWhereUniqueInput!]
    "Update multiple ScheduledRelease documents"
    update: [ScheduledReleaseUpdateWithNestedWhereUniqueInput!]
    "Upsert multiple ScheduledRelease documents"
    upsert: [ScheduledReleaseUpsertWithNestedWhereUniqueInput!]
}

input ScheduledReleaseUpdateManyInput {
    description: String
    errorMessage: String
    isActive: Boolean
    releaseAt: DateTime
    title: String
}

input ScheduledReleaseUpdateManyWithNestedWhereInput {
    "Update many input"
    data: ScheduledReleaseUpdateManyInput!
    "Document search"
    where: ScheduledReleaseWhereInput!
}

input ScheduledReleaseUpdateOneInlineInput {
    "Connect existing ScheduledRelease document"
    connect: ScheduledReleaseWhereUniqueInput
    "Create and connect one ScheduledRelease document"
    create: ScheduledReleaseCreateInput
    "Delete currently connected ScheduledRelease document"
    delete: Boolean
    "Disconnect currently connected ScheduledRelease document"
    disconnect: Boolean
    "Update single ScheduledRelease document"
    update: ScheduledReleaseUpdateWithNestedWhereUniqueInput
    "Upsert single ScheduledRelease document"
    upsert: ScheduledReleaseUpsertWithNestedWhereUniqueInput
}

input ScheduledReleaseUpdateWithNestedWhereUniqueInput {
    "Document to update"
    data: ScheduledReleaseUpdateInput!
    "Unique document search"
    where: ScheduledReleaseWhereUniqueInput!
}

input ScheduledReleaseUpsertInput {
    "Create document if it didn't exist"
    create: ScheduledReleaseCreateInput!
    "Update document if it exists"
    update: ScheduledReleaseUpdateInput!
}

input ScheduledReleaseUpsertWithNestedWhereUniqueInput {
    "Upsert data"
    data: ScheduledReleaseUpsertInput!
    "Unique document search"
    where: ScheduledReleaseWhereUniqueInput!
}

"Identifies documents"
input ScheduledReleaseWhereInput {
    "Logical AND on all given filters."
    AND: [ScheduledReleaseWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [ScheduledReleaseWhereInput!]
    "Logical OR on all given filters."
    OR: [ScheduledReleaseWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    description: String
    "All values containing the given string."
    description_contains: String
    "All values ending with the given string."
    description_ends_with: String
    "All values that are contained in given list."
    description_in: [String]
    "Any other value that exists and is not equal to the given value."
    description_not: String
    "All values not containing the given string."
    description_not_contains: String
    "All values not ending with the given string"
    description_not_ends_with: String
    "All values that are not contained in given list."
    description_not_in: [String]
    "All values not starting with the given string."
    description_not_starts_with: String
    "All values starting with the given string."
    description_starts_with: String
    errorMessage: String
    "All values containing the given string."
    errorMessage_contains: String
    "All values ending with the given string."
    errorMessage_ends_with: String
    "All values that are contained in given list."
    errorMessage_in: [String]
    "Any other value that exists and is not equal to the given value."
    errorMessage_not: String
    "All values not containing the given string."
    errorMessage_not_contains: String
    "All values not ending with the given string"
    errorMessage_not_ends_with: String
    "All values that are not contained in given list."
    errorMessage_not_in: [String]
    "All values not starting with the given string."
    errorMessage_not_starts_with: String
    "All values starting with the given string."
    errorMessage_starts_with: String
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID]
    "Any other value that exists and is not equal to the given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    isActive: Boolean
    "Any other value that exists and is not equal to the given value."
    isActive_not: Boolean
    isImplicit: Boolean
    "Any other value that exists and is not equal to the given value."
    isImplicit_not: Boolean
    operations_every: ScheduledOperationWhereInput
    operations_none: ScheduledOperationWhereInput
    operations_some: ScheduledOperationWhereInput
    publishedAt: DateTime
    "All values greater than the given value."
    publishedAt_gt: DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: DateTime
    "All values that are contained in given list."
    publishedAt_in: [DateTime]
    "All values less than the given value."
    publishedAt_lt: DateTime
    "All values less than or equal the given value."
    publishedAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    publishedAt_not: DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    releaseAt: DateTime
    "All values greater than the given value."
    releaseAt_gt: DateTime
    "All values greater than or equal the given value."
    releaseAt_gte: DateTime
    "All values that are contained in given list."
    releaseAt_in: [DateTime]
    "All values less than the given value."
    releaseAt_lt: DateTime
    "All values less than or equal the given value."
    releaseAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    releaseAt_not: DateTime
    "All values that are not contained in given list."
    releaseAt_not_in: [DateTime]
    status: ScheduledReleaseStatus
    "All values that are contained in given list."
    status_in: [ScheduledReleaseStatus]
    "Any other value that exists and is not equal to the given value."
    status_not: ScheduledReleaseStatus
    "All values that are not contained in given list."
    status_not_in: [ScheduledReleaseStatus]
    title: String
    "All values containing the given string."
    title_contains: String
    "All values ending with the given string."
    title_ends_with: String
    "All values that are contained in given list."
    title_in: [String]
    "Any other value that exists and is not equal to the given value."
    title_not: String
    "All values not containing the given string."
    title_not_contains: String
    "All values not ending with the given string"
    title_not_ends_with: String
    "All values that are not contained in given list."
    title_not_in: [String]
    "All values not starting with the given string."
    title_not_starts_with: String
    "All values starting with the given string."
    title_starts_with: String
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

"References ScheduledRelease record uniquely"
input ScheduledReleaseWhereUniqueInput {
    id: ID
}

input UnpublishLocaleInput {
    "Locales to unpublish"
    locale: Locale!
    "Stages to unpublish selected locales from"
    stages: [Stage!]!
}

input UserConnectInput {
    "Allow to specify document position in list of connected documents, will default to appending at end of list"
    position: ConnectPositionInput
    "Document to connect"
    where: UserWhereUniqueInput!
}

input UserCreateManyInlineInput {
    "Connect multiple existing User documents"
    connect: [UserWhereUniqueInput!]
}

input UserCreateOneInlineInput {
    "Connect one existing User document"
    connect: UserWhereUniqueInput
}

"Identifies documents"
input UserManyWhereInput {
    "Logical AND on all given filters."
    AND: [UserWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [UserWhereInput!]
    "Logical OR on all given filters."
    OR: [UserWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime]
    documentInStages_every: UserWhereStageInput
    documentInStages_none: UserWhereStageInput
    documentInStages_some: UserWhereStageInput
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID]
    "Any other value that exists and is not equal to the given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    isActive: Boolean
    "Any other value that exists and is not equal to the given value."
    isActive_not: Boolean
    kind: UserKind
    "All values that are contained in given list."
    kind_in: [UserKind]
    "Any other value that exists and is not equal to the given value."
    kind_not: UserKind
    "All values that are not contained in given list."
    kind_not_in: [UserKind]
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values that are contained in given list."
    name_in: [String]
    "Any other value that exists and is not equal to the given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string"
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    picture: String
    "All values containing the given string."
    picture_contains: String
    "All values ending with the given string."
    picture_ends_with: String
    "All values that are contained in given list."
    picture_in: [String]
    "Any other value that exists and is not equal to the given value."
    picture_not: String
    "All values not containing the given string."
    picture_not_contains: String
    "All values not ending with the given string"
    picture_not_ends_with: String
    "All values that are not contained in given list."
    picture_not_in: [String]
    "All values not starting with the given string."
    picture_not_starts_with: String
    "All values starting with the given string."
    picture_starts_with: String
    publishedAt: DateTime
    "All values greater than the given value."
    publishedAt_gt: DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: DateTime
    "All values that are contained in given list."
    publishedAt_in: [DateTime]
    "All values less than the given value."
    publishedAt_lt: DateTime
    "All values less than or equal the given value."
    publishedAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    publishedAt_not: DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [DateTime]
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime]
}

input UserUpdateManyInlineInput {
    "Connect multiple existing User documents"
    connect: [UserConnectInput!]
    "Disconnect multiple User documents"
    disconnect: [UserWhereUniqueInput!]
    "Override currently-connected documents with multiple existing User documents"
    set: [UserWhereUniqueInput!]
}

input UserUpdateOneInlineInput {
    "Connect existing User document"
    connect: UserWhereUniqueInput
    "Disconnect currently connected User document"
    disconnect: Boolean
}

"This contains a set of filters that can be used to compare values internally"
input UserWhereComparatorInput {
    "This field can be used to request to check if the entry is outdated by internal comparison"
    outdated_to: Boolean
}

"Identifies documents"
input UserWhereInput {
    "Logical AND on all given filters."
    AND: [UserWhereInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [UserWhereInput!]
    "Logical OR on all given filters."
    OR: [UserWhereInput!]
    "Contains search across all appropriate fields."
    _search: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime]
    documentInStages_every: UserWhereStageInput
    documentInStages_none: UserWhereStageInput
    documentInStages_some: UserWhereStageInput
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values that are contained in given list."
    id_in: [ID]
    "Any other value that exists and is not equal to the given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string"
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    isActive: Boolean
    "Any other value that exists and is not equal to the given value."
    isActive_not: Boolean
    kind: UserKind
    "All values that are contained in given list."
    kind_in: [UserKind]
    "Any other value that exists and is not equal to the given value."
    kind_not: UserKind
    "All values that are not contained in given list."
    kind_not_in: [UserKind]
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values that are contained in given list."
    name_in: [String]
    "Any other value that exists and is not equal to the given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string"
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    picture: String
    "All values containing the given string."
    picture_contains: String
    "All values ending with the given string."
    picture_ends_with: String
    "All values that are contained in given list."
    picture_in: [String]
    "Any other value that exists and is not equal to the given value."
    picture_not: String
    "All values not containing the given string."
    picture_not_contains: String
    "All values not ending with the given string"
    picture_not_ends_with: String
    "All values that are not contained in given list."
    picture_not_in: [String]
    "All values not starting with the given string."
    picture_not_starts_with: String
    "All values starting with the given string."
    picture_starts_with: String
    publishedAt: DateTime
    "All values greater than the given value."
    publishedAt_gt: DateTime
    "All values greater than or equal the given value."
    publishedAt_gte: DateTime
    "All values that are contained in given list."
    publishedAt_in: [DateTime]
    "All values less than the given value."
    publishedAt_lt: DateTime
    "All values less than or equal the given value."
    publishedAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    publishedAt_not: DateTime
    "All values that are not contained in given list."
    publishedAt_not_in: [DateTime]
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "Any other value that exists and is not equal to the given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime]
}

"The document in stages filter allows specifying a stage entry to cross compare the same document between different stages"
input UserWhereStageInput {
    "Logical AND on all given filters."
    AND: [UserWhereStageInput!]
    "Logical NOT on all given filters combined by AND."
    NOT: [UserWhereStageInput!]
    "Logical OR on all given filters."
    OR: [UserWhereStageInput!]
    "This field contains fields which can be set as true or false to specify an internal comparison"
    compareWithParent: UserWhereComparatorInput
    "Specify the stage to compare with"
    stage: Stage
}

"References User record uniquely"
input UserWhereUniqueInput {
    id: ID
}

input VersionWhereInput {
    id: ID!
    revision: Int!
    stage: Stage!
}
